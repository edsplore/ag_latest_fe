import { Download } from "lucide-react";
import { useEffect, useState } from "react";
import { useAuth } from "../hooks/useAuth";
import {
  fetchCustomerInvoices,
  getCustomerId,
  setupMonthlyPlanPayment,
  getSubscriptions,
  checkPaymentMethodSetup,
  setupPaymentMethod,
  createUserInFirebase,
} from "../lib/customer";
import React from "react";
import { Plus } from "lucide-react";
import { plans } from "../lib/plans";

const PaymentMethodButton: React.FC<
  React.ButtonHTMLAttributes<HTMLButtonElement>
> = ({ children, ...props }) => <button {...props}>{children}</button>;

export function Billing() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [customerId, setCustomerId] = useState<string>("");
  const [pastInvoices, setPastInvoices] = useState<any[]>([]);
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
  const [currentPlan, setCurrentPlan] = useState<any>(null);
  const [hasPaymentMethod, setHasPaymentMethod] = useState(false); //Added state
  const [isLoadingPaymentMethod, setIsLoadingPaymentMethod] = useState(false);
  const [paymentMethodError, setPaymentMethodError] = useState<string | null>(
    null,
  );
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const initializeCustomer = async () => {
      if (!user) return;
      try {
        let id = await getCustomerId(user.uid);
        if(!id){
          id = await createUserInFirebase(user.email ?? "", user.uid);
        }
        if (id) {
          setCustomerId(id);
          const [invoices, subscriptionData, paymentMethodStatus] =
            await Promise.all([
              fetchCustomerInvoices(id),
              getSubscriptions(id),
              checkPaymentMethodSetup(id), //Added call
            ]);
          setPastInvoices(invoices);
          setHasPaymentMethod(paymentMethodStatus?.hasDynamicSetup);
          if (subscriptionData?.isActive) {
            const details = subscriptionData;
            setCurrentPlan({
              name: details.planName,
              price: `$${details.amount}`,
              status: "active",
              validUntil: new Date(details.currentPeriodEnd * 1000),
            });
          }
        }
      } catch (error) {
        console.error("Error initializing customer:", error);
      } finally {
        setLoading(false);
      }
    };
    initializeCustomer();
  }, [user]);

  const handlePlanSelect = (productId: string) => {
    setSelectedPlan(productId);
    setError("");
  };

  const handleMakePayment = async () => {
    if (!selectedPlan) {
      setError("Please select a plan to continue");
      return;
    }

    if (!user || !customerId) {
      setError("Something went wrong. Please try again.");
      return;
    }

    setError("");
    setIsProcessing(true);

    try {
      await setupMonthlyPlanPayment(
        user.uid,
        selectedPlan,
        customerId,
        user.email || "",
      );
    } catch (error) {
      console.error("Error setting up payment:", error);
      setError("Failed to setup payment. Please try again.");
      setLoading(false);
    }
  };

  const handleSetupPaymentMethod = async () => {
    if (!user || !user.email) {
      console.error("User not found");
      return;
    }

    if (!customerId) {
      console.error("Customer ID not found");
      return;
    }

    setIsLoadingPaymentMethod(true);
    setPaymentMethodError(null);

    try {
      await setupPaymentMethod(user.uid, user.email, customerId);
    } catch (error) {
      console.error("Error setting up payment method:", error);
      setPaymentMethodError(
        error instanceof Error ? error.message : "An unexpected error occurred",
      );
    } finally {
      setIsLoadingPaymentMethod(false);
    }
  };

  return (
    <div>
      <div className="flex justify-between items-start mb-10">
        <h1 className="text-4xl font-medium mb-4">Billing</h1>
        {hasPaymentMethod ? (
          <button className="bg-green-50 text-green-700 px-4 py-2 rounded-lg flex items-center space-x-2 text-sm font-medium">
            <span>âœ“ Payment method added</span>
          </button>
        ) : (
          <PaymentMethodButton
            className="bg-[#155EEF] text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2 text-xs disabled:opacity-50 font-medium"
            onClick={!loading ? handleSetupPaymentMethod : undefined}
            disabled={loading || isLoadingPaymentMethod}
          >
            {loading || isLoadingPaymentMethod ? (
              <div className="flex justify-center items-center">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              </div>
            ) : (
              <>
                <Plus size={16} />
                Add a payment method
              </>
            )}
          </PaymentMethodButton>
        )}
      </div>
      {/* Plan Selection */}
      {loading ? (
        <div className="mb-8">
          <div className="flex justify-center items-center h-48">
            <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
          </div>
        </div>
      ) : !currentPlan ? (
      <div className="flex flex-col gap-4">
        {error || paymentMethodError && (
          <div className="bg-red-50 text-red-600 p-2 rounded-md text-xs">
            {error || paymentMethodError}
          </div>
        )}
        <div className="grid grid-cols-3 gap-5">
          {plans.map((plan, idx) => {
            const isSelected = selectedPlan === plan.productId;
            const isEven = idx % 2 === 0;

            return (
              <div
                key={plan.name}
                className={`px-8 py-6 rounded-3xl flex flex-col gap-4 border cursor-pointer transition-all border hover:border-blue-400 ${
                  isSelected ? "shadow-xl" : "hover:shadow-md"
                }`}
                style={{
                  backgroundColor: isEven ? "#155EEF" : "#101214",
                  opacity: isSelected ? 1 : 0.4,
                }}
                onClick={() => handlePlanSelect(plan.productId)}
              >
                <h3 className="text-2xl font-bold text-white">{plan.name}</h3>
                <hr className="border-white" style={{ borderWidth: "1px" }} />
                <div className="flex flex-col gap-2">
                  <p className="text-sm font-bold text-white">Price</p>
                  <div className="text-4xl font-bold flex gap-1 items-end text-white">
                    ${plan.price}
                    <span className="text-sm font-normal mb-1 text-white">
                      /
                    </span>
                    <span className="text-sm font-normal mb-1 text-white">
                      month
                    </span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        <div className="relative w-full flex justify-center px-16 mb-8">
          <button
            type="button"
            onClick={handleMakePayment}
            disabled={!selectedPlan || isProcessing}
            className="flex-1 bg-[#155EEF] text-white py-2 px-4 max-w-80 mx-auto rounded-md hover:bg-blue-700 transition-colors text-sm disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? "Processing..." : "Complete Billing"}
          </button>
        </div>
      </div>
      ) : (
        <div className="mb-8">
          <h2 className="text-2xl font-semibold mb-6">Current Plan</h2>
          <div className="p-6 rounded-lg border border-blue-500 bg-blue-50">
            <div className="flex justify-between items-center">
              <div>
                <h3 className="text-xl font-medium">{currentPlan.name}</h3>
                <p className="text-gray-600">
                  Valid until: {currentPlan.validUntil.toLocaleDateString()}
                </p>
                <p className="text-green-600 mt-2">
                  Status: {currentPlan.status}
                </p>
              </div>
              <div className="text-3xl font-bold">
                {currentPlan.price}
                <span className="text-sm font-normal text-gray-600">
                  /month
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Invoice history section */}
      <div className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium">Invoice History</h2>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 text-left">
              <tr>
                <th className="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Invoice
                </th>
                <th className="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Amount
                </th>
                <th className="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Date
                </th>
                <th className="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider"></th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={5} className="px-6 py-4 text-center">
                    <div className="flex justify-center">
                      <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                    </div>
                  </td>
                </tr>
              ) : pastInvoices.length === 0 ? (
                <tr>
                  <td
                    colSpan={5}
                    className="px-6 py-4 text-center text-gray-500"
                  >
                    No invoices found
                  </td>
                </tr>
              ) : (
                pastInvoices.map((invoice) => (
                  <tr key={invoice.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {new Date(invoice.period_end * 1000).toLocaleString(
                        "default",
                        { month: "long", year: "numeric" },
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      ${(invoice.amount_paid / 100).toFixed(2)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {new Date(invoice.created * 1000).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`px-2 py-1 text-xs rounded-full ${
                          invoice.status === "paid"
                            ? "bg-green-100 text-green-800"
                            : invoice.status === "open"
                              ? "bg-yellow-100 text-yellow-800"
                              : "bg-red-100 text-red-800"
                        }`}
                      >
                        {invoice.status.charAt(0).toUpperCase() +
                          invoice.status.slice(1)}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right">
                      <a
                        href={invoice.hosted_invoice_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 flex items-center text-sm"
                      >
                        <Download className="h-4 w-4 mr-1" />
                        Download
                      </a>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
